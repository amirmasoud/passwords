.vue-tags-input {
  width: 100%;
  max-width: 100% !important;
  @include transition($input-transition);

  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  @if $enable-rounded {
    // Manually use the if/else instead of the mixin to account for iOS override
    border-radius: $input-border-radius;
  } @else {
    // Otherwise undo the iOS default
    border-radius: 0;
  }

  &:focus-within {
    border-color: $input-focus-border-color;
    box-shadow: 0 0 0 $input-btn-focus-width $input-btn-focus-color;

    .input {
      border-color: $input-focus-border-color !important;
    }
  }

  .input {
    border-color: $input-border-color !important;
    padding: $input-tags-padding-y $input-padding-x !important;

    @if $enable-rounded {
      border-radius: $input-border-radius;
    } @else {
      border-radius: 0;
    }
  }

  .tag.valid {
    background-color: $primary;

    @if $enable-rounded {
      border-radius: $input-border-radius;
    } @else {
      border-radius: 0;
    }
  }

  &.is-invalid {
    @include transition($input-transition);

    &:focus-within {
      box-shadow: 0 0 0 $input-focus-width rgba($form-feedback-invalid-color, .25);
    }

    .input {
      border-color: $form-feedback-invalid-color !important;
    }
  }

  .selected-item {
    @if $enable-rounded {
      border-radius: $input-border-radius;
    } @else {
      border-radius: 0;
    }
    background-color: $gray-100 !important;
    color: darken($gray-900, 5%) !important;

    &:hover, &:focus {
      background-color: $gray-100 !important;
      color: darken($gray-900, 5%) !important;
    }

    &:active {
      background-color: $component-active-bg !important;
      color: $component-active-color !important;
    }
  }
}
